(func foo (x y z)
    (plus x (times y z)))
(cond (nonequal (foo 1 2 3) 7)
    (return false))

; test recursion
(func factorial (n)
    (cond (lesseq n 1)
        1
        (times n (factorial (minus n 1)))))
(cond (nonequal (factorial 5) 120)
    (return false))

; test that the inner `a` shadows the outer one
(setq a 1)
(func bar (a) (plus a 1))
(cond (or (nonequal (bar 10) 11) (nonequal a 1))
    (return false))

; test that functions have access to the outer scope
(func baz ()
    (setq a 4)
    (factorial a))
(cond (or (nonequal (baz) 24) (nonequal a 4))
    (return false))

; test that it is possible to redefine functions
(func baz () 1729)
(cond (nonequal (baz) 1729)
    (return false))

; test the return value of `func`
(cond (not (isfunc (func x ())))
    (return false))

; test using function objects
(cond (nonequal ((func id (x) x) 10) 10)
    (return false))
(setq eggs id)
(cond (nonequal (eggs 11) 11)
    (return false))
(func x (y) (y 12))
(cond (nonequal (x eggs) 12)
    (return false))

; test lambdas
(setq square (lambda (x) (times x x)))
(cond (nonequal (square 5) 25)
    (return false))
(cond (nonequal (x square) 144)
    (return false))
(cond ((lambda (x) (not x)) true)
    (return false))
(cond (not (isfunc x))
    (return false))

(setq counter 0)
(setq increment (lambda () (setq counter (plus counter 1))))
(and (equal (increment) 1)
     (equal (increment) 2)
     (equal counter 2))
